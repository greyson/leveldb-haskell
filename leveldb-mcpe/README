leveldb: A key-value store
Authors: Sanjay Ghemawat (sanjay@google.com) and Jeff Dean (jeff@google.com)

The code under this directory implements a system for maintaining a
persistent key/value store.

See doc/index.html for more explanation.
See doc/impl.html for a brief overview of the implementation.

*Fork notes*
Author: Tommaso Checchi (tommaso@mojang.com)

additional dependencies:
    -(good) part of boost: unfortunately, the only port available used boost.
    -zlib: well, duh
    -snappy: optional, enabled building with -DSNAPPY


compressor interface:
    An application can provide any number of Compressors by
    implementing the Compressor interface.
    The fork implements 2 compressors out of the box,
    ZlibCompressor and SnappyCompressor (if built with -DSNAPPY)
    To configure LevelDB to use one or more compressors, just register
    them in the Options object used to initialize the database,
    eg:
        options.compressors[0] = leveldb::ZlibCompressor();
        options.compressors[1] = leveldb::SnappyCompressor();
        ...

    When implementing a compressor, take special care in assigning it a 
    "uniqueCompressionID" that is truly unique as it will be used to
    look up which compressor was used to compress a block of memory.


DLL support:
    DLL support makes mandatory to define what DLLX means.
    When compiling with no DLL support or not on Windows, 
    just define it out such as:
        -DDLLX=

    When compiling *with* DLL support in VS, add to your LevelDB project:
        DLLX=__declspec(dllexport)

    and to your user project:
        DLLX=__declspec(dllimport)
        
    DLL support was added to "fix" the horrible link times I was getting
    using Boost, so that all symbols could be globbed once in LevelDB.dll
    instead than impacting on the game build time for each change.
    If anyone contributes a proper port not using Boost, I'll be happy to 
    remove all of this madness.

*end fork notes*

The public interface is in include/*.h.  Callers should not include or
rely on the details of any other header files in this package.  Those
internal APIs may be changed without warning.

Guide to header files:

include/db.h
    Main interface to the DB: Start here

include/options.h
    Control over the behavior of an entire database, and also
    control over the behavior of individual reads and writes.

include/comparator.h
    Abstraction for user-specified comparison function.  If you want
    just bytewise comparison of keys, you can use the default comparator,
    but clients can write their own comparator implementations if they
    want custom ordering (e.g. to handle different character
    encodings, etc.)

include/iterator.h
    Interface for iterating over data. You can get an iterator
    from a DB object.

include/write_batch.h
    Interface for atomically applying multiple updates to a database.

include/slice.h
    A simple module for maintaining a pointer and a length into some
    other byte array.

include/status.h
    Status is returned from many of the public interfaces and is used
    to report success and various kinds of errors.

include/env.h
    Abstraction of the OS environment.  A posix implementation of
    this interface is in util/env_posix.cc

include/table.h
include/table_builder.h
    Lower-level modules that most clients probably won't use directly
